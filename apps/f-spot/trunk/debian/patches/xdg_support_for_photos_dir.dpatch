#! /bin/sh /usr/share/dpatch/dpatch-run
## xdg_support_for_photos_dir.dpatch by  <distromatic@distromatic-1>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad f-spot-0.5.0.3-orig~/src/Core/Global.cs f-spot-0.5.0.3-orig/src/Core/Global.cs
--- f-spot-0.5.0.3-orig~/src/Core/Global.cs	2009-05-19 17:55:48.000000000 +0200
+++ f-spot-0.5.0.3-orig/src/Core/Global.cs	2009-05-20 09:07:04.000000000 +0200
@@ -4,14 +4,27 @@
  * This is free software. See COPYING for details
  *
  */
+using System;
+using System.IO;
 
 namespace FSpot {
 	public static class Global {
 		public static string HomeDirectory {
-			get { return System.IO.Path.Combine (System.Environment.GetEnvironmentVariable ("HOME"), System.String.Empty); }
+			get { return Environment.GetFolderPath (Environment.SpecialFolder.Personal); }
 		}
 		
-		private static string base_dir = System.IO.Path.Combine (HomeDirectory,  System.IO.Path.Combine (".gnome2", "f-spot"));
+		private static bool UseOldDir () {
+			return Directory.Exists (legacy_base_dir);
+		}
+
+		private static string legacy_base_dir = Path.Combine (HomeDirectory,  Path.Combine (".gnome2", "f-spot"));
+		public static string LegacyBaseDirectory {
+			get { return legacy_base_dir; }
+			set { legacy_base_dir = value; }
+		}
+
+		private static string base_dir = (UseOldDir () ? legacy_base_dir : 
+					Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData), "f-spot"));
 		public static string BaseDirectory {
 			get { return base_dir; }
 			set { base_dir = value; }
@@ -36,6 +49,18 @@
 			get { return display_profile; }
 		}
 
+		private static string application_cache = Path.Combine (XdgBaseDirectorySpec.GetUserDirectory ("XDG_CACHE_HOME", ".cache"), "f-spot");
+		public static string ApplicationCache {
+			get { return application_cache; }
+			set { application_cache = value; }
+		}
+
+		private static string extension_cache_root = (UseOldDir () ? BaseDirectory : Path.Combine (ApplicationCache, "extensions"));
+		public static string ExtensionCacheRoot {
+			get { return extension_cache_root; }
+			set { extension_cache_root = value; }
+		}
+
 		private static Cms.Profile destination_profile;
 		public static Cms.Profile DestinationProfile {
 			set { destination_profile = value; }
@@ -47,7 +72,7 @@
 			get {
 				if (icon_theme == null) {
 					icon_theme = Gtk.IconTheme.Default;
-					icon_theme.AppendSearchPath (System.IO.Path.Combine (Defines.APP_DATA_DIR, "icons"));
+					icon_theme.AppendSearchPath (Path.Combine (Defines.APP_DATA_DIR, "icons"));
 				}
 				return icon_theme;
 			}
diff -urNad f-spot-0.5.0.3-orig~/src/Core/XdgBaseDirectorySpec.cs f-spot-0.5.0.3-orig/src/Core/XdgBaseDirectorySpec.cs
--- f-spot-0.5.0.3-orig~/src/Core/XdgBaseDirectorySpec.cs	1970-01-01 01:00:00.000000000 +0100
+++ f-spot-0.5.0.3-orig/src/Core/XdgBaseDirectorySpec.cs	2009-05-20 09:07:04.000000000 +0200
@@ -0,0 +1,82 @@
+//
+// XdgBaseDirectorySpec.cs
+//
+// Author:
+//   Aaron Bockover <abockover@novell.com>
+//
+// Copyright (C) 2006-2008 Novell, Inc.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+
+namespace FSpot
+{
+	public static class XdgBaseDirectorySpec
+	{
+		public static string GetUserDirectory (string key, string fallback)
+		{
+			string home_dir = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
+			string config_dir = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData);
+           
+			string env_path = Environment.GetEnvironmentVariable (key);
+			if (!String.IsNullOrEmpty (env_path)) {
+				return env_path;
+			}
+
+			string user_dirs_path = Path.Combine (config_dir, "user-dirs.dirs");
+
+			if (!File.Exists (user_dirs_path)) {
+				return Path.Combine (home_dir, fallback);
+			}
+
+			try {
+				using (StreamReader reader = new StreamReader (user_dirs_path)) {
+					string line;
+					while ((line = reader.ReadLine ()) != null) {
+						line = line.Trim ();
+						int delim_index = line.IndexOf ('=');
+						if (delim_index > 8 && line.Substring (0, delim_index) == key) {
+							string path = line.Substring (delim_index + 1).Trim ('"');
+							bool relative = false;
+
+							if (path.StartsWith ("$HOME/")) {
+								relative = true;
+								path = path.Substring (6);
+							} else if (path.StartsWith ("~")) {
+								relative = true;
+								path = path.Substring (1);
+							} else if (!path.StartsWith ("/")) {
+								relative = true;
+							}
+
+							return relative ? Path.Combine (home_dir, path) : path;
+						}
+					}
+				}
+			} catch (FileNotFoundException) {
+			}
+            
+			return Path.Combine (home_dir, fallback);
+		}
+	}
+}
diff -urNad f-spot-0.5.0.3-orig~/src/Makefile.am f-spot-0.5.0.3-orig/src/Makefile.am
--- f-spot-0.5.0.3-orig~/src/Makefile.am	2009-05-19 18:23:29.000000000 +0200
+++ f-spot-0.5.0.3-orig/src/Makefile.am	2009-05-20 09:08:28.000000000 +0200
@@ -33,7 +33,8 @@
 	$(srcdir)/Core/IPreferenceBackend.cs	\
 	$(srcdir)/Core/PhotoChanges.cs		\
 	$(srcdir)/Core/PhotosChanges.cs		\
-	$(srcdir)/Core/Roll.cs
+	$(srcdir)/Core/Roll.cs			\
+	$(srcdir)/Core/XdgBaseDirectorySpec.cs
 
 QUERY_CSDISTFILES =				\
 	$(srcdir)/Query/DateRange.cs		\
diff -urNad f-spot-0.5.0.3-orig~/src/Preferences.cs f-spot-0.5.0.3-orig/src/Preferences.cs
--- f-spot-0.5.0.3-orig~/src/Preferences.cs	2009-05-19 17:55:48.000000000 +0200
+++ f-spot-0.5.0.3-orig/src/Preferences.cs	2009-05-20 09:07:04.000000000 +0200
@@ -158,7 +158,7 @@
 			case SCREENSAVER_TAG:
 				return 1;
 			case STORAGE_PATH:
-				return System.IO.Path.Combine (FSpot.Global.HomeDirectory, Catalog.GetString("Photos"));
+				return Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
 			case EXPORT_EMAIL_SIZE:
 				return 3;	// medium size 640px
 			case EXPORT_EMAIL_ROTATE:
diff -urNad f-spot-0.5.0.3-orig~/src/main.cs f-spot-0.5.0.3-orig/src/main.cs
--- f-spot-0.5.0.3-orig~/src/main.cs	2009-05-19 17:55:48.000000000 +0200
+++ f-spot-0.5.0.3-orig/src/main.cs	2009-05-20 09:07:04.000000000 +0200
@@ -48,6 +48,7 @@
 		    	"-? -help -usage     Show this help list" + Environment.NewLine +
 			"-i -import PARAM    import from the given uri" + Environment.NewLine +
 			"-p -photodir PARAM  default import folder" + Environment.NewLine +
+			"-c -cachedir PARAM  cache folder " + Environment.NewLine +
 			"-shutdown           shutdown a running f-spot instance" + Environment.NewLine +
 			"-slideshow          display a slideshow" + Environment.NewLine +
 			"-V -version         Display version and licensing information" + Environment.NewLine +
@@ -104,6 +105,15 @@
 				Log.InformationFormat ("PhotoDirectory is now {0}", FSpot.Global.PhotoDirectory);
 				break;
 
+			case "-c": case "-cachedir": case "--cachedir":
+				if (i+1 == args.Length || args[i+1].StartsWith ("-")) {
+					Console.WriteLine ("f-spot: -cachedir option takes one argument");
+					return 1;
+				}
+				FSpot.Global.ApplicationCache = System.IO.Path.GetFullPath (args [++i]);
+				System.Console.WriteLine ("CacheDirectory is now {0}", FSpot.Global.ApplicationCache);
+				break;
+
 			case "-i": case "-import": case "--import":
 				if (i+1 == args.Length) {
 					Log.Error ("f-spot: -import option takes one argument");
@@ -189,7 +199,7 @@
 			}
 			Log.DebugTimerPrint (timer, "DBusInitialization took {0}");
 			uint ma_timer = Log.InformationTimerStart ("Initializing Mono.Addins");
-			AddinManager.Initialize (FSpot.Global.BaseDirectory);
+			AddinManager.Initialize (FSpot.Global.ExtensionCacheRoot);
 			AddinManager.Registry.Update (null);
 			SetupService setupService = new SetupService (AddinManager.Registry);
 			string maj_version = String.Join (".", Defines.VERSION.Split ('.'), 0, 3);
