<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../libs/global.ent">
%globalent;
<!ENTITY % gnome-menus-C SYSTEM "../../libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
<chapter id="network-authentication" status="review">
	<title>Network Authentication</title>

         <para>
         This section explains various Network Authentication protocols.
         </para>
	<sect1 id="openldap-server" status="review">
		<title>OpenLDAP Server</title>
         <para>
	 LDAP is an acronym for Lightweight Directory Access Protocol, it is a simplified
         version of the X.500 protocol. The directory setup in this section will 
	 be used for authentication. Nevertheless, LDAP can be
         used in numerous ways: authentication, shared directory (for mail
         clients), address book, etc.
         </para>

         <para>
         To describe LDAP quickly,  all information is stored in a tree structure. With 
	 <application>OpenLDAP</application> you have freedom to determine 
	 the directory arborescence (the Directory Information Tree: the DIT) yourself.
	 We will begin with a basic tree containing two nodes below the root:
         </para>

	 <itemizedlist>
           <listitem>
               <para>"People" node where your users will be stored</para>
           </listitem>
           <listitem>
               <para>"Groups" node where your groups will be stored</para>
           </listitem>
         </itemizedlist>

	 <para>
         Before beginning, you should determine what the root of your LDAP directory
	 will be. By default, your tree will be determined by your Fully Qualified 
	 Domain Name (FQDN). If your domain is example.com (which we will use in this 
         example), your root node will be dc=example,dc=com. 
        </para>

	<sect2 id="openldap-server-installation" status="review">
		<title>Installation</title>

   	<para>
	First, install the <application>OpenLDAP</application> server daemon 
	<application>slapd</application> and <application>ldap-utils</application>, 
	a package containing LDAP management utilities:
	</para>
<screen>
<command>sudo apt-get install slapd ldap-utils</command>
</screen>
	
	<para>
	The installation process will prompt you for the LDAP directory admin 
	password and confirmation.
	</para>

	<para>
	After installing <application>slapd</application> the directory can be
	configured using <application>dpkg-reconfigure</application>:
	</para>
<screen>
<command>sudo dpkg-reconfigure slapd</command>
</screen>

	<para>
	You will then be taken through a menu based configuration dialog allowing
	you to configure various <application>slapd</application> options.  For 
	the most part the defaults work well, but if your <emphasis>root</emphasis>
	node differs from the server's FQDN be sure to enter the correct name.
	</para>
	
	</sect2>
	<sect2 id="openldap-server-populate" status="review">
		<title>Populating LDAP</title>

	<para>
	The directory has been created during installation and reconfiguration, and now it 
	is time to populate it. It will be populated with a "classical" scheme that will
	be compatible with address book applications and with Unix Posix accounts.  Posix
	accounts will allow authentication to various applications, such as web 
	applications, email Mail Transfer Agent (MTA) applications, etc.
	</para>
	
	<note>
	  <para>
	  For external applications to authenticate using LDAP they will each need to be 
	  specifically configured to do so.  Refer to the individual application 
	  documentation for details.	 
	  </para>
	</note>

	<para>
	LDAP directories can be populated with LDIF (LDAP Directory
	Interchange Format) files. Copy the following example LDIF file, naming it
	<filename>example.com.ldif</filename>, somewhere on your system:
	</para>

<programlisting>
dn: ou=people,dc=example,dc=com
objectClass: organizationalUnit
ou: people

dn: ou=groups,dc=example,dc=com
objectClass: organizationalUnit
ou: groups

dn: uid=john,ou=people,dc=example,dc=com
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
uid: john
sn: Doe
givenName: John
cn: John Doe
displayName: John Doe
uidNumber: 1000
gidNumber: 10000
userPassword: password
gecos: John Doe
loginShell: /bin/bash
homeDirectory: /home/john
shadowExpire: -1
shadowFlag: 0
shadowWarning: 7
shadowMin: 8
shadowMax: 999999
shadowLastChange: 10877
mail: john.doe@example.com
postalCode: 31000
l: Toulouse
o: Example
mobile: +33 (0)6 xx xx xx xx
homePhone: +33 (0)5 xx xx xx xx
title: System Administrator
postalAddress: 
initials: JD

dn: cn=example,ou=groups,dc=example,dc=com
objectClass: posixGroup
cn: example
gidNumber: 10000
</programlisting>

	<para>
	In this example the directory structure, a user, and a 
	group have been setup. In other examples you might see the 
	<emphasis>objectClass: top</emphasis> added in every entry, but that is the 
	default behaviour so you do not have to add it explicitly.
	</para>

	<para>
	Now, to add your entries to the LDAP directory:
	</para>

	<itemizedlist>
	    <listitem>
	      <para>
	      Stop <application>slapd</application>: 
	      </para>
<screen>
<command>sudo /etc/init.d/slapd stop</command>
</screen>
            </listitem>
            <listitem>
    	      <para>
	      Add the content:
	      </para>
<screen>
<command>sudo slapadd -l example.com.ldif</command>
</screen>
             </listitem>
             <listitem>
    	       <para>
	       Start LDAP daemon:
	       </para>
<screen>
<command>sudo /etc/init.d/slapd start</command>
</screen>
             </listitem>
	</itemizedlist>

	<para>
	We can check that the content has been correctly added with the
	tools from the <application>ldap-utils</application> package. In order to
  	execute a search of the LDAP directory:
	</para>

<screen>
<command>ldapsearch -xLLL -b "dc=example,dc=com" uid=john sn givenName cn</command>
<computeroutput>
dn: uid=john,ou=people,dc=example,dc=com
cn: John Doe
sn: Doe
givenName: John
</computeroutput>
</screen>

	<para>
	Just a quick explanation:
	</para>

	<itemizedlist>
	    <listitem>
                <para>
		<emphasis>-x:</emphasis> will not use SASL authentication 
		method, which is the default.
		</para>
            </listitem>
            <listitem>
                <para>
		<emphasis>-LLL:</emphasis> disable printing LDIF schema information.
		</para>
            </listitem>
        </itemizedlist>
	
	</sect2>

	<sect2 id="openldap-server-acl" status="review">
              <title>Setting up ACL</title>

	<para>
	Authentication requires access to the password field, that should be not
	accessible by default. Another issue is that during password change
	using <command>passwd</command>, <emphasis>shadowLastChange</emphasis> needs 
	to be accessible by authenticated users.  The following code, from 
	<application>/etc/ldap/slapd.conf</application>, shows the default ACL 
	setting that permits the <emphasis>admin</emphasis> user and authenticated 
	users access to shadowLastChange:
	</para>

<programlisting>
access to attrs=userPassword,shadowLastChange
        by dn="cn=admin,dc=example,dc=com" write
        by anonymous auth
        by self write
        by * none
</programlisting>

	</sect2>

        <sect2 id="openldap-tls" status="review">
          <title>TLS and SSL</title>

          <para>
          When authenticating to an OpenLDAP server it is best to do so using an encrypted session.  This can be accomplished using Transport
          Layer Security (TLS) and/or Secure Sockets Layer (SSL).
          </para>

          <para>
          The first step in the process is to obtain or create a <emphasis>certificate</emphasis>.  See <xref linkend="certificates-and-security"/>
          for details.
          </para>

          <para>
          Once you have a certificate and key, edit <filename>/etc/ldap/slapd.conf</filename> adding the following options under the index entries:
          </para>

<programlisting>
# TLS/SSL
TLSCertificateFile    /etc/ssl/certs/server.crt
TLSCertificateKeyFile /etc/ssl/private/server.key
</programlisting>

          <note>
            <para>
            Adjust the <filename>server.crt</filename> and <filename>server.key</filename> names if yours are different.
            </para>
          </note>

          <para>
          Next, edit <filename>/etc/default/slapd</filename> uncomment the <emphasis>SLAPD_SERVICES</emphasis> option:
          </para>

<programlisting>
SLAPD_SERVICES="ldap://127.0.0.1:389/ ldaps:/// ldapi:///"
</programlisting>

          <para>
          Now the <emphasis>openldap</emphasis> user needs access to the certificate:
          </para>

<screen>
<command>sudo adduser openldap ssl-cert</command>
<command>sudo chgrp ssl-cert /etc/ssl/private/server.key</command>
</screen>

          <note>
            <para>
            If the <filename role="directory">/etc/ssl/private</filename> and <filename>/etc/ssl/private/server.key</filename> have
            different permissions, adjust the commands appropriately.     
            </para>
          </note>

          <para>
          Finally, restart <application>slapd</application>:
          </para>

<screen>
<command>sudo /etc/init.d/slapd restart</command>
</screen>

          <para>
          The <application>slapd</application> daemon should now be listening for LDAPS connections and be able to use STARTTLS during
          authentication.
          </para>

        </sect2>

	<sect2 id="openldap-server-replication" status="review">
		<title>LDAP replication</title>

	<para>
	LDAP service often quickly becomes a highly critical service in an
	information system: multiple systems depend on LDAP for authentication, 
	authorization, mail, etc. It is a good idea to setup a 
	redundant system. 
	</para>
	
	<para>
	Replication is achieved using the <emphasis>Syncrepl</emphasis> engine. Syncrepl allows the
	directory to be synced using either a <emphasis>push</emphasis> or <emphasis>pull</emphasis> based
	system.  In a push based configuration a <quote>primary</quote> server will push directory updates
	to <quote>secondary</quote> servers, while a pull based approach allows replication servers to sync on
	a time based interval.
	</para>

	<para>
	The following is an example of <emphasis>push</emphasis> configuration.  First you need to setup the
	<application>slapd</application> provider by uncommenting the following line in 
	<filename>/etc/ldap/slapd.conf</filename>:
	</para>

<programlisting>
rootdn          "cn=admin,dc=example,dc=com"
</programlisting>

	<para>
	Below the <emphasis>rootdn</emphasis> line add:
	</para>
	
<programlisting>
moduleload  syncprov.la
overlay syncprov
syncprov-checkpoint 100 10
syncprov-sessionlog 100
</programlisting>

	<para>
	Now restart <application>slapd</application>:
	</para>
<screen>
<command>sudo /etc/init.d/slapd restart</command>
</screen>

	<para>
	On separate <application>OpenLDAP</application> server configure the <application>slapd</application> consumer
	by again uncommenting the <emphasis>rootdn</emphasis> line in <filename>/etc/ldap/slapd.conf</filename>:
	</para>

<programlisting>
rootdn          "cn=admin,dc=example,dc=com"
</programlisting>

	<para>
	Then add the following below the rootdn entry:
	</para>

<programlisting>
syncrepl rid=123
	 provider=ldap://ldap01.example.com:389
	 type=refreshAndPersist
         searchbase="dc=example,dc=com"
         filter="(objectClass=*)"
         scope=sub
         schemachecking=off
         bindmethod=simple
         binddn="uid=john,ou=people,dc=example,dc=com"
         credentials=password
</programlisting>

	<note>
	  <para>
	  This example uses the <emphasis>john</emphasis> user we created above to authenticate the sync process.  Be sure
	  to use an account with sufficient privileges.  Also, replace <emphasis role="italic">ldap://ldap01.example.com:389</emphasis>
	  with the appropriate host name.
	  </para>
	</note>

	<para>
	Now restart the consumer <application>slapd</application> daemon:
	</para>
<screen>
<command>sudo /etc/init.d/slapd restart</command>
</screen>

	<para>
	If all goes well you should be able to execute the <application>ldapsearch</application> example from 
	above on the server with the replicated directory.
	</para>
<screen>
<command>ldapsearch -xLLL -b "dc=example,dc=com" uid=john sn givenName cn</command>
</screen>

	<para>
	The <application>slapd</application> daemon will send log information to <filename>/var/log/syslog</filename>
	by default.  So if all does <emphasis>not</emphasis> go well check there for errors and other troubleshooting information.
	</para>
		
	</sect2>
        <sect2 id="openldap-auth-config" status="review">
          <title>LDAP Authentication</title>

          <para>
          Once you have a working LDAP server, the <application>auth-client-config</application> and <application>libnss-ldap</application> 
          packages take the pain out of configuring an Ubuntu client to authenticate using LDAP.  To install the packages from, a terminal 
          prompt enter:
          </para> 

<screen>
<command>sudo apt-get install libnss-ldap</command>
</screen>

         <para>
         During the install a menu dialog will ask you connection details about your LDAP server.
         </para>
       
         <para>
         If you make a mistake when entering your information you can execute the dialog again using:
         </para>

<screen>
<command>sudo dpkg-reconfigure ldap-auth-config</command>
</screen>

         <para>
         The results of the dialog can be seen in <filename>/etc/ldap.conf</filename>.  If your server requires options not covered in the menu 
         edit this file accordingly.
         </para>

         <para>
         Now that <application>libnss-ldap</application> is configured enable the <application>auth-client-config</application> LDAP profile by 
         entering:
         </para>

<screen>
<command>sudo auth-client-config -a -p lac_ldap</command>
</screen>
         
          <itemizedlist>
	    <listitem>
              <para>
	      <emphasis>-a:</emphasis> applies the specified profile.
	      </para>
            </listitem>
	    <listitem>
              <para>
	      <emphasis>-p:</emphasis> name of the profile to enable, disable, etc.
	      </para>
	    </listitem>
	    <listitem>
              <para>
	      <emphasis>lac_ldap:</emphasis> the <application>auth-client-config</application> profile that is part of the 
              <application>ldap-auth-config</application> package.
	      </para>
	    </listitem>
          </itemizedlist>

          <para>
          You should now be able to login using user credentials stored in the LDAP directory.
          </para> 

        </sect2>
        <sect2 id="ldap-usergroup-management" status="review">
          <title>User and Group Management</title>

          <para>
          The <application>ldap-utils</application> comes with multiple utilities to manage the directory, but the long 
          string of options needed, can make them a burden to use. The <application>ldapscripts</application> package contains 
          configurable scripts to easily manage LDAP users and groups.
          </para>

          <para>
          To install the package, from a terminal enter:
          </para>

<screen>
<command>sudo apt-get install ldapscripts</command>
</screen>

          <para> 
          Next, edit the config file <filename>/etc/ldapscripts/ldapscripts.conf</filename> uncommenting and changing the following:
          </para>       

<programlisting>
SERVER=localhost
BINDDN='cn=admin,dc=example,dc=com'
BINDPWDFILE="/etc/ldapscripts/ldapscripts.passwd"
SUFFIX='dc=example,dc=com'
GSUFFIX='ou=Groups'
USUFFIX='ou=People'
MSUFFIX='ou=Computers'
GIDSTART=1000
UIDSTART=1000
MIDSTART=1000
LOGFILE="/var/log/ldapscripts.log"
UHOMES="/home/%u"
</programlisting>

          <para>
          Now, create the <filename>ldapscripts.passwd</filename> file to allow authenticated access to the directory:
          </para>

<screen>
<command>sudo sh -c "echo -n 'secret' > /etc/ldapscripts/ldapscripts.passwd"</command>
<command>sudo chmod 400 /etc/ldapscripts/ldapscripts.passwd</command>
</screen>

          <note>
            <para>
            Replace <quote>secret</quote> with the actual password for your LDAP admin user.
            </para>
          </note>

          <para>
          The <application>ldapscripts</application> are now ready to help manage your directory.  The following are some examples
          of how to use the scripts:
          </para>

          <itemizedlist>
	    <listitem>
              <para>
	      Create a new user:
	      </para>
<screen>
<command>sudo ldapadduser george example</command>
</screen>
              <para>
              This will create a user with uid <emphasis role="italic">george</emphasis> and set the user's primary group (gid) to
              <emphasis role="italic">example</emphasis>
              </para>
	    </listitem>
	    <listitem>
              <para>
	      Change a user's password:
	      </para>
<screen>
<command>sudo _ldappasswd george</command>
<computeroutput>Changing password for user uid=george,ou=People,dc=example,dc=com</computeroutput>
<userinput>New Password: </userinput>
<userinput>New Password (verify): </userinput>
</screen>
	    </listitem>
	    <listitem>
              <para>
	      Delete a user:
	      </para>
<screen>
<command>sudo ldapdeleteuser george</command>
</screen>
              <warning>
                <para>
                This script will also remove the user's <emphasis>home directory</emphasis>.
                </para>
              </warning>
	    </listitem>
	    <listitem>
              <para>
	      Add a group:
	      </para>
<screen>
<command>sudo ldapaddgroup qa</command>
</screen>
	    </listitem>
	    <listitem>
              <para>
	      Delete a group:
	      </para>
<screen>
<command>sudo ldapdeletegroup qa</command>
</screen>
	    </listitem>
	    <listitem>
              <para>
	      Add a user to a group:
	      </para>
<screen>
<command>sudo ldapaddusertogroup george qa</command>
</screen>
              <para>
              You should now see a <emphasis>memberUid</emphasis> attribute for the <emphasis role="italic">qa</emphasis> group with 
              a value of <emphasis role="italic">george</emphasis>.
              </para>
	    </listitem>
            <listitem>
              <para>
	      Remove a user from a group:
	      </para>
<screen>
<command>sudo ldapdeleteuserfromgroup george qa</command>
</screen>
              <para>
              The <emphasis>memberUid</emphasis> attribute should now be removed from the <emphasis role="italic">qa</emphasis>
              group.
              </para>
	    </listitem>
            <listitem>
              <para>
	      The <application>_ldapmodifyuser</application> script allows you to add, remove, or replace a user's attributes.  
              The script uses the same syntax as the <application>ldapmodify</application> utility.  For example:
	      </para>
<screen>
<command>sudo _ldapmodifyuser george</command>
<computeroutput># About to modify the following entry :
dn: uid=george,ou=People,dc=example,dc=com
objectClass: account
objectClass: posixAccount
cn: george
uid: george
uidNumber: 1001
gidNumber: 1001
homeDirectory: /home/george
loginShell: /bin/bash
gecos: george
description: User account
userPassword:: e1NTSEF9eXFsTFcyWlhwWkF1eGUybVdFWHZKRzJVMjFTSG9vcHk=

# Enter your modifications here, end with CTRL-D.
dn: uid=george,ou=People,dc=example,dc=com</computeroutput>
<userinput>replace: gecos
gecos: George Stevens</userinput>
</screen>
              <para>
              The user's <emphasis>gecos</emphasis> should now be <quote>George Stevens</quote>.
              </para>
	    </listitem>
          </itemizedlist>

          <para>
          There are more useful scripts in the package, to see a full list enter: <command>dpkg -L ldapscripts | grep bin</command>
          </para>

        </sect2>
	<sect2 id="openldap-server-resources" status="review">
	  <title>Resources</title>
	  <itemizedlist>
	    <listitem>
              <para>
	      For more information see <ulink url="http://www.openldap.org/">OpenLDAP Home Page</ulink>
	      </para>
	    </listitem>
	    <listitem>
              <para>
	      Though starting to show it's age, a great source for in depth LDAP information is 
	      O'Reilly's <ulink url="http://www.oreilly.com/catalog/ldapsa/">LDAP System Administration</ulink>
	      </para>
	    </listitem>
	    <listitem>
              <para>
              Packt's <ulink url="http://www.packtpub.com/OpenLDAP-Developers-Server-Open-Source-Linux/book">Mastering OpenLDAP</ulink>
              is a great reference covering newer versions of OpenLDAP.
	      </para>
	    </listitem>
	    <listitem>
              <para>
              For more information on <application>auth-client-config</application> see the man page: <command>man auth-client-config</command>.
	      </para>
	    </listitem>
	    <listitem>
              <para>
              For more details regarding the <application>ldapscripts</application> package see the man pages: <command>man ldapscripts</command>,
              <command>man ldapadduser</command>, <command>man ldapaddgroup</command>, etc.
	      </para>
	    </listitem>
	  </itemizedlist>
	 
	</sect2>
  </sect1>
  <sect1 id="samba-ldap" status="review">
    <title>Samba and LDAP</title>

    <para>
    This section covers configuring Samba to use LDAP for user, group, and machine account information and authentication.
    The assumption is, you already have a working OpenLDAP directory installed and the server is configured to use it for 
    authentication. See <xref linkend="openldap-server"/> and <xref linkend="openldap-auth-config"/> for details on setting up OpenLDAP.
    </para>

    <sect2 id="samba-ldap-installation" status="review">
      <title>Installation</title>
  
      <para>
      There are three packages needed when integrating Samba with LDAP.  <application>samba</application>, <application>samba-doc</application>,
      and <application>smbldap-tools</application> packages .  To install the packages, from a terminal enter:
      </para>

<screen>
<command>sudo apt-get install samba samba-doc smbldap-tools</command>
</screen>

      <para>
      Strictly speaking the <application>smbldap-tools</application> package isn't needed, but unless you have another package or custom scripts,
      a method of managing users, groups, and computer accounts is needed.  
      </para>

    </sect2>
    <sect2 id="samba-ldap-openldap-configuration" status="review">
      <title>OpenLDAP Configuration</title>

      <para>
      In order for Samba to use OpenLDAP as a <emphasis>passdb backend</emphasis>, the user objects in the directory will need additional
      attributes.  This section assumes you want Samba to be configured as a Windows NT domain controller, and will add the necessary LDAP
      objects and attributes.
      </para>

      <para>
      The Samba attributes are defined in the <filename>samba.schema</filename> file which is part of the 
      <application>samba-doc</application> package.  The schema file needs to be unzipped and copied to 
      <filename>/etc/ldap/schema</filename>.  From a terminal prompt enter:
      </para>

<screen>
<command>sudo cp /usr/share/doc/samba-doc/examples/LDAP/samba.schema.gz /etc/ldap/schema/</command>
<command>sudo gzip -d /etc/ldap/schema/samba.schema.gz</command>
</screen>

      <para>
      Next, edit <filename>/etc/ldap/slapd.conf</filename> adding the new schema and the necessary indexes:
      </para>

<programlisting>
include         /etc/ldap/schema/samba.schema
...
index           objectClass             eq,pres
index           uidNumber               eq
index           gidNumber               eq
index           loginShell              eq
index           uid                     eq,pres,sub
index           memberUid               eq,pres,sub
index           uniqueMember            eq,pres
index           sambaSID                eq
index           sambaPrimaryGroupSID    eq
index           sambaGroupType          eq
index           sambaSIDList            eq
index           sambaDomainName         eq
index           default                 sub
</programlisting>

      <para>
      Restart <application>slapd</application> for the new settings to take effect, and run <application>slapindex</application> to create the 
      new indexes:
      </para>

<screen>
<command>sudo /etc/init.d/slapd stop</command>
<command>sudo -u openldap slapindex -f /etc/ldap/slapd.conf</command>
<command>sudo /etc/init.d/slapd start</command>
</screen>

      <para>
      Next, configure the <application>smbldap-tools</application> package to match your environment.  The package comes with a configuration
      script that will ask questions about the needed options.  To run the script enter:
      </para>

<screen>
<command>sudo gzip -d /usr/share/doc/smbldap-tools/configure.pl.gz</command>
<command>sudo perl /usr/share/doc/smbldap-tools/configure.pl</command>
</screen>

      <para>
      Once you have answered the questions, there should be <filename>/etc/smbldap-tools/smbldap.conf</filename> 
      and <filename>/etc/smbldap-tools/smbldap_bind.conf</filename> files.  These files are generated by the configure script, so if
      you made any mistakes while executing the script it may be simpler to edit the file appropriately. 
      </para>

      <para>
      The <application>smbldap-populate</application> script will add the necessary users, groups, and LDAP objects required for Samba.  It is
      a good idea to make a backup LDAP Data Interchange Format (LDIF) file with <application>slapcat</application> before executing the command:
      </para>

<screen>
<command>sudo slapcat -l backup.ldif</command>
</screen>

      <para>
      Once you have a current backup execute <application>smbldap-populate</application> by entering:
      </para>

<screen>
<command>sudo smbldap-populate</command>
</screen>

      <note>
        <para>
        You can create an LDIF file containing the new Samba objects by executing <command>sudo smbldap-populate -e samba.ldif</command>.
        This allows you to look over the changes making sure everything is correct.
        </para>
      </note>

      <para>
      Your LDAP directory now has the necessary domain information to authenticate Samba users.
      </para>

    </sect2>
    <sect2 id="samba-ldap-samba-configuration">
      <title>Samba Configuration</title>

      <para>
      There a multiple ways to configure Samba for details on some common configurations see <xref linkend="windows-networking"/>.      
      To configure Samba to use LDAP, edit the main Samba configuration file <filename>/etc/samba/smb.conf</filename> commenting 
      the <emphasis>passdb backend</emphasis> option and adding the following:
      </para>

<programlisting>
#   passdb backend = tdbsam

# LDAP Settings
   passdb backend = ldapsam:ldap://hostname
   ldap suffix = dc=example,dc=com
   ldap user suffix = ou=People
   ldap group suffix = ou=Groups
   ldap machine suffix = ou=Computers
   ldap idmap suffix = dc=example,dc=com
   ldap admin dn = cn=admin,dc=example,dc=com
   ldap ssl = start tls
   ldap passwd sync = yes
...
   add machine script = sudo /usr/sbin/smbldap-useradd -t 0 -w "%u"
</programlisting>

      <para>
      Restart <application>samba</application> to enable the new settings:
      </para>

<screen>
<command>sudo /etc/init.d/samba restart</command>
</screen>

      <para>
      Now Samba needs to know the LDAP admin password.  From a terminal prompt enter:
      </para>

<screen>
<command>sudo smbpasswd -w secret</command>
</screen>

      <note>
        <para>
        Replacing <emphasis role="italic">secret</emphasis> with your LDAP admin password.
        </para>
      </note>

      <para>
      If you currently have users in LDAP, and you want them to authenticate using Samba, they will need some  
      Samba attributes defined in the <filename>samba.schema</filename> file.
      Add the Samba attributes to existing users using the <application>smbpasswd</application> utility, replacing 
      <emphasis role="italic">username</emphasis> with an actual user:
      </para>

<screen>
<command>sudo smbpasswd -a username</command>
</screen>

      <para>
      You will then be asked to enter the user's password.
      </para>

      <para>
      To add new user, group, and machine accounts use the utilities from the <application>smbldap-tools</application> package.  Here are some 
      examples:
      </para> 

      <itemizedlist>
        <listitem>
          <para>
          To add a new user to LDAP with Samba attributes enter the following, replacing username with an actual username:
          </para>
<screen>
<command>sudo smbldap-useradd -a -P username</command>
</screen>
          <para>
          The <emphasis>-a</emphasis> option adds the Samba attributes, and the <emphasis>-P</emphasis> options calls the 
          <application>smbldap-passwd</application> utility after the user is created allowing you to enter a password for the user.
          </para>
        </listitem>
        <listitem>
          <para>
          To remove a user from the directory enter:
          </para>
<screen>
<command>sudo smbldap-userdel username</command>
</screen>
          <para>
          The <application>smbldap-userdel</application> utility also has a <emphasis>-r</emphasis> option to remove the user's home directory.
          </para>
        </listitem>
        <listitem>
          <para>
          Use <application>smbldap-groupadd</application> to add a group, replacing groupname with an appropriate group:
          </para>
<screen>
<command>sudo smbldap-groupadd -a groupname</command>
</screen>
          <para>
          Similar to <application>smbldap-useradd</application>, the <emphasis>-a</emphasis> adds the Samba attributes.
          </para>
        </listitem>
        <listitem>
          <para>
          To add a user to a group use <application>smbldap-groupmod</application>:
          </para>
<screen>
<command>sudo smbldap-groupmod -m username groupname</command>
</screen>
          <para>
          Be sure to replace <emphasis>username</emphasis> with a real user.  Also, the <emphasis>-m</emphasis> option can add more than one 
          user at a time by listing them in <emphasis>comma separated</emphasis> format.
          </para>
        </listitem>
        <listitem>
          <para>
          <application>smbldap-groupmod</application> can also be used to remove a user from a group:
          </para>
<screen>
<command>sudo smbldap-groupmod -x username groupname</command>
</screen>
        </listitem>
        <listitem>
          <para>
          Additionally, the <application>smbldap-useradd</application> utility can add Samba machine accounts:
          </para>
<screen>
<command>sudo smbldap-useradd -t 0 -w username</command>
</screen>
          <para>
          Replace <emphasis>username</emphasis> with the name of the workstation.  The <emphasis>-t 0</emphasis> option creates the machine account
          without a delay, while the <emphasis>-w</emphasis> option specifies the user as a machine account.  Also, note the 
          <emphasis>add machine script</emphasis> option in <filename>/etc/samba/smb.conf</filename> was changed to use 
          <application>smbldap-useradd</application>.
          </para>
        </listitem>
      </itemizedlist>

      <para>
      There are more useful utilities and options in the <application>smbldap-tools</application> package.  The man page for each utility provides
      more details.
      </para>

    </sect2>
    <sect2 id="samba-ldap-resources" status="review">
      <title>Resources</title>

      <itemizedlist>
        <listitem>
          <para>
          There are multiple places where LDAP and Samba is documented in the 
          <ulink url="http://samba.org/samba/docs/man/Samba-HOWTO-Collection/">Samba HOWTO Collection</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
          Specifically see the  
          <ulink url="http://samba.org/samba/docs/man/Samba-HOWTO-Collection/passdb.html">passdb section</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
          Another good site is 
          <ulink url="http://www.iallanis.info/smbldap-tools/docs/samba-ldap-howto/">Samba OpenLDAP HOWTO</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
          Again, for more information on <application>smbldap-tools</application> see the man pages: 
          <command>man smbldap-useradd</command>, <command>man smbldap-groupadd</command>, <command>man smbldap-populate</command>,
          etc.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
  <sect1 id="kerberos" status="review">
    <title>Kerberos</title>
    
    <para>
    <application>Kerberos</application> is a network authentication system based on the principal of a trusted third party.
    The other two parties being the user and the service the user wishes to authenticate to.  Not all services and applications
    can use Kerberos, but for those that can, it brings the network environment one step closer to being Single Sign On (SSO).
    </para>

    <para>
    This section covers installation and configuration of a Kerberos server, and some example client configurations.
    </para>
    
    <sect2 id="kerberos-overview" status="review">
      <title>Overview</title>

      <para>
      If you are new to Kerberos there are a few terms that are good to understand before setting up a Kerberos server.  Most of the terms
      will relate to things you may be familiar with in other environments:
      </para>

      <itemizedlist>
        <listitem>
          <para>
          <emphasis>Principal:</emphasis> any users, computers, and services provided by servers need to be defined as Kerberos Principals.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Instances:</emphasis> are used for service principals and special administrative principals.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Realms:</emphasis> the unique realm of control provided by the Kerberos installation.  Usually the DNS domain converted to 
          uppercase (EXAMPLE.COM).
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Key Distribution Center:</emphasis> (KDC) consist of three parts, a database of all principals, the authentication server,
          and the ticket granting server.  For each realm there must be at least one KDC.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Ticket Granting Ticket:</emphasis> issued by the Authentication Server (AS), the Ticket Granting Ticket (TGT) is encrypted in 
          the user's password which is known only to the user and the KDC.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Ticket Granting Server:</emphasis> (TGS) issues service tickets to clients upon request.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Tickets:</emphasis> confirm the identity of the two principals.  One principal being a user and the other a service requested by 
          the user.  Tickets establish an encryption key used for secure communication during the authenticated session.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>Keytab Files:</emphasis> are files extracted from the KDC principal database and contain the encryption key for a service or
          host.
          </para>
        </listitem>
      </itemizedlist>

      <para>
      To put the pieces together, a Realm has at least one KDC, preferably two for redundancy, which contains a database of Principals.  When a 
      user principal logs into a workstation, configured for Kerberos authentication, the KDC issues a Ticket Granting Ticket (TGT).  If the user
      supplied credentials match, the user is authenticated and can then request tickets for Kerberized services from the Ticket Granting Server
      (TGS).  The service tickets allow the user to authenticate to the service without entering another username and password.
      </para>
   
    </sect2>
    <sect2 id="kerberos-server" status="review">
      <title>Kerberos Server</title>    
      <sect3 id="kerberos-server-installation" status="review">
        <title>Installation</title>

        <para> 
        Before installing the Kerberos server a properly configured DNS server is needed for your domain.  Since the Kerberos Realm by 
        convention matches the domain name, this section uses the <emphasis>example.com</emphasis> domain configured in 
        <xref linkend="dns-primarymaster-configuration"/>.  
        </para>

        <para>
        Also, Kerberos is a time sensitive protocol.  So if the local system time between a client machine and the server differs by
        more than five minutes (by default), the workstation will not be able to authenticate.  To correct the problem all hosts 
        should have their time synchronized using the <emphasis>Network Time Protocol (NTP)</emphasis>.  For details
        on setting up NTP see <xref linkend="NTP"/>.
        </para>

        <para>
        The first step in installing a Kerberos Realm is to install the <application>krb5-kdc</application>  and 
        <application>krb5-admin-server</application> packages.  From a terminal enter:
        </para>

<screen>
<command>sudo apt-get install krb5-kdc krb5-admin-server</command>
</screen>

        <para>
        You will be asked at the end of the install to supply a name for the Kerberos and Admin servers, which may or may not be the 
        same server, for the realm.
        </para>

        <para>
        Next, create the new realm with the <application>kdb5_newrealm</application> utility:
        </para>

<screen>
<command>sudo krb5_newrealm</command>
</screen>

      </sect3>
      <sect3 id="kerberos-server-configuration" status="review">
        <title>Configuration</title>
      
        <para>
        The questions asked during installation are used to configure the <filename>/etc/krb5.conf</filename> file.  If you need to adjust 
        the Key Distribution Center (KDC) settings simply edit the file and restart the <application>krb5-kdc</application> daemon.
        </para>

        <procedure>
          <step>

            <para>
            Now that the KDC running an admin user is needed.  It is recommended to use a different username from your everyday username.  
            Using the <application>kadmin.local</application> utility in a terminal prompt enter:
            </para>

<screen>
<command>sudo kadmin.local</command>
<computeroutput>Authenticating as principal root/admin@EXAMPLE.COM with password.
kadmin.local:</computeroutput><userinput> addprinc steve/admin</userinput>
<computeroutput>WARNING: no policy specified for steve/admin@EXAMPLE.COM; defaulting to no policy
Enter password for principal "steve/admin@EXAMPLE.COM": 
Re-enter password for principal "steve/admin@EXAMPLE.COM": 
Principal "steve/admin@EXAMPLE.COM" created.
kadmin.local:</computeroutput><userinput> quit</userinput>
</screen>

            <para>
            In the the above example <emphasis role="italic">steve</emphasis> is the <emphasis>Principal</emphasis>, 
            <emphasis role="italic">/admin</emphasis> is an <emphasis>Instance</emphasis>, and 
            <emphasis role="italic">@EXAMPLE.COM</emphasis> signifies the realm.  The <emphasis role="italic">"every day"</emphasis>
            Principal would be <emphasis>steve@EXAMPLE.COM</emphasis>, and should have only normal user rights.            
            </para>

            <note>
              <para>
              Replace <emphasis>EXAMPLE.COM</emphasis> and <emphasis>steve</emphasis> with your Realm and admin username.
              </para>
            </note>

          </step>
          <step>
 
            <para>
            Next, the new admin user needs to have the appropriate Access Control List (ACL) permissions.
            The permissions are configured in the <filename>/etc/krb5kdc/kadm5.acl</filename> file:
            </para>

<programlisting>
steve/admin@EXAMPLE.COM        *
</programlisting>

            <para>
            This entry grants <emphasis>steve/admin</emphasis> the ability to perform any operation on all principals in the realm.
            </para>

          </step>
          <step>

            <para>
            Now restart the <application>krb5-admin-server</application> for the new ACL to take affect:
            </para>

<screen>
<command>sudo /etc/init.d/krb5-admin-server restart</command>
</screen>

          </step>
          <step>

            <para>
            The new user principal can be tested using the <application>kinit utility</application>:
            </para>

<screen>
<command>kinit steve/admin</command>
<computeroutput>steve/admin@EXAMPLE.COM's Password:</computeroutput>
</screen>          

            <para>
            After entering the password, use the <application>klist</application> utility to view information about the 
            Ticket Granting Ticket (TGT):
            </para>

<screen>
<command>klist</command>
<computeroutput>Credentials cache: FILE:/tmp/krb5cc_1000
        Principal: steve/admin@EXAMPLE.COM

  Issued           Expires          Principal
Jul 13 17:53:34  Jul 14 03:53:34  krbtgt/EXAMPLE.COM@EXAMPLE.COM</computeroutput>
</screen>

            <para>
            You may need to add an entry into the <filename>/etc/hosts</filename> for the KDC.  For example:           
            </para>
            
<programlisting>
192.168.0.1   kdc01.example.com       kdc01
</programlisting>

            <para>
            Replacing <emphasis>192.168.0.1</emphasis> with the IP address of your KDC.
            </para>

          </step>
          <step>
          
            <para>
            In order for clients to determine the KDC for the Realm some DNS SRV records are needed.  Add the following to 
            <filename>/etc/named/db.example.com</filename>:
            </para>

<programlisting>
_kerberos._udp.EXAMPLE.COM.     IN SRV 1  0 88  kdc01.example.com.
_kerberos._tcp.EXAMPLE.COM.     IN SRV 1  0 88  kdc01.example.com.
_kerberos._udp.EXAMPLE.COM.     IN SRV 10 0 88  kdc02.example.com. 
_kerberos._tcp.EXAMPLE.COM.     IN SRV 10 0 88  kdc02.example.com. 
_kerberos-adm._tcp.EXAMPLE.COM. IN SRV 1  0 749 kdc01.example.com.
_kpasswd._udp.EXAMPLE.COM.      IN SRV 1  0 464 kdc01.example.com.
</programlisting>

            <note>
              <para>
              Replace <emphasis>EXAMPLE.COM</emphasis>, <emphasis>kdc01</emphasis>, and <emphasis>kdc02</emphasis> with your 
              domain name, primary KDC, and secondary KDC.
              </para>
            </note>

            <para>
            See <xref linkend="dns"/> for detailed instructions on setting up DNS.
            </para>

          </step>
        </procedure>
       
        <para>
        Your new Kerberos Realm is now ready to authenticate clients.
        </para>

      </sect3>
    </sect2>
    <sect2 id="kerberos-secondary-kdc" status="review">
      <title>Secondary KDC</title>

      <para>
      Once you have one Key Distribution Center (KDC) on your network, it is good practice to have a Secondary KDC in case the
      primary becomes unavailable.
      </para> 
      
      <procedure>
        <step>
        
        <para>
        First, install the packages, and when asked for the Kerberos and Admin server names enter the name of the Primary KDC:        
        </para>

<screen>
<command>sudo apt-get install krb5-kdc krb5-admin-server</command>
</screen>

        </step>
        <step>

        <para>
        Once you have the packages installed, create the Secondary KDC's host principal.  From a terminal prompt, enter:
        </para>

<screen>
<command>kadmin -q "addprinc -randkey host/kdc02.example.com"</command>
</screen>
    
        <note>
          <para>
          After, issuing any <application>kadmin</application> commands you will be prompted for your 
          <emphasis>username/admin@EXAMPLE.COM</emphasis> principal password.
          </para>
        </note>
      
        </step>
        <step>

          <para>
          Extract the <emphasis>keytab</emphasis> file:
          </para>

<screen>
<command>kadmin -q "ktadd -k keytab.kdc02 host/kdc02.example.com"</command>
</screen>

        </step>
        <step>

          <para>
          There should now be a <filename>keytab.kdc02</filename> in the current directory, move the file to 
          <filename>/etc/krb5.keytab</filename>:
          </para>

<screen>
<command>sudo mv keytab.kdc02 /etc/krb5.keytab</command>
</screen>

          <note>
            <para>
            If the path to the <filename>keytab.kdc02</filename> file is different adjust accordingly. 
            </para>
          </note>

          <para>
          Also, you can list the principals in a Keytab file, which can be useful when troubleshooting, using the 
          <application>klist</application> utility:
          </para>

<screen>
<command>sudo klist -k /etc/krb5.keytab</command>
</screen>

        </step>
        <step>

          <para>
          Next, there needs to be a <filename>kpropd.acl</filename> file on each KDC that lists all KDCs for the Realm.  For example, 
          on both primary and secondary KDC, create <filename>/etc/krb5kdc/kpropd.acl</filename>:
          </para>

<programlisting>
host/kdc01.example.com@EXAMPLE.COM
host/kdc02.example.com@EXAMPLE.COM
</programlisting>

        </step>
        <step>

          <para>
          Create an empty database on the <emphasis>Secondary KDC</emphasis>:
          </para>

<screen>
<command>sudo kdb5_util -s create</command>
</screen>

        </step>
        <step>

          <para>
          Now start the <application>kpropd</application> daemon, which listens for connections from the 
          <application>kprop</application> utility.  <application>kprop</application> is used to transfer 
          dump files:
          </para>

<screen>
<command>sudo kpropd -S</command>
</screen>
      
        </step>
        <step>

          <para>
          From a terminal on the <emphasis>Primary KDC</emphasis>, create a dump file of the principal database:
          </para>

<screen>
<command>sudo kdb5_util dump /var/lib/krb5kdc/dump</command>
</screen>

        </step>
        <step>

          <para>
          Extract the Primary KDC's <emphasis>keytab</emphasis> file and copy it to <filename>/etc/krb5.keytab</filename>:
          </para>

<screen>
<command>kadmin -q "ktadd -k keytab.kdc01 host/kdc01.example.com"</command>
<command>sudo mv keytab.kdc01 /etc/kr5b.keytab</command>
</screen>

          <note>
            <para>
            Make sure there is a <emphasis>host</emphasis> for <emphasis>kdc01.example.com</emphasis> before extracting the Keytab.
            </para>
          </note>

        </step>
        <step>

          <para>
          Using the <application>kprop</application> utility push the database to the Secondary KDC:
          </para>

<screen>
<command>sudo kprop -r EXAMPLE.COM -f /var/lib/krb5kdc/dump kdc02.example.com</command>
</screen>

          <note>
            <para>
            There should be a <emphasis>SUCCEEDED</emphasis> message if the propagation worked.  If there is an error 
            message check <filename>/var/log/syslog</filename> on the secondary KDC for more information.
            </para>
          </note>
      
          <para>
          You may also want to create a <application>cron</application> job to periodically update the database on the Secondary KDC.  For 
          example, the following will push the database every hour:
          </para>

<programlisting>
# m h  dom mon dow   command
0 * * * * /usr/sbin/kdb5_util dump /var/lib/krb5kdc/dump &amp;&amp; /usr/sbin/kprop -r EXAMPLE.COM -f /var/lib/krb5kdc/dump kdc02.example.com
</programlisting>
  
        </step>
        <step>

          <para>
          Back on the <emphasis>Secondary KDC</emphasis>, create a <emphasis>stash</emphasis> file to hold the Kerberos 
          master key:
          </para>

<screen>
<command>sudo kdb5_util stash</command>
</screen>

        </step>
        <step>

          <para>
          Finally, start the <application>krb5-kdc</application> daemon on the Secondary KDC:
          </para>

<screen>
<command>sudo /etc/init.d/krb5-kdc start</command>
</screen>

        </step>
      </procedure>

      <para>
      The <emphasis>Secondary KDC</emphasis> should now be able to issue tickets for the Realm.  You can test this by stopping 
      the <application>krb5-kdc</application> daemon on the Primary KDC, then use <application>kinit</application> to request a ticket.
      If all goes well you should receive a ticket from the Secondary KDC.
      </para>

    </sect2>
    <sect2 id="kerberos-linux-client" status="review">
      <title>Kerberos Linux Client</title>    

      <para>
      This section covers configuring a Linux system as a <application>Kerberos</application> client.  This will allow access
      to any kerberized services once a user has successfully logged into the system.
      </para>

      <sect3 id="kerberos-client-installation" status="review">
        <title>Installation</title>

        <para>
        In order to authenticate to a Kerberos Realm, the <application>krb5-user</application> and <application>libpam-krb5</application>
        packages are needed, along with a few others that are not strictly necessary but make life easier.  To install the packages 
        enter the following in a terminal prompt:
        </para>

<screen>
<command>sudo apt-get install krb5-user libpam-krb5 libpam-ccreds auth-client-config</command>
</screen>

        <para>
        The <application>auth-client-config</application> package allows simple configuration of PAM for authentication from multiple 
        sources, and the <application>libpam-ccreds</application> will cache authentication credentials allowing you to login in case the 
        Key Distribution Center (KDC) is unavailable.  This package is also useful for laptops that may authenticate using Kerberos while 
        on the corporate network, but will need to be accessed off the network as well.
        </para>

      </sect3>
      <sect3 id="kerberos-client-configuration" status="review">
        <title>Configuration</title>

        <para>
        To configure the client in a terminal enter:
        </para>

<screen>
<command>sudo dpkg-reconfigure krb5-config</command>
</screen>

        <para>
        You will then be prompted to enter the name of the Kerberos Realm.  Also, if you don't have DNS configured with Kerberos 
        <emphasis>SRV</emphasis> records, the menu will prompt you for the hostname of the Key Distribution Center (KDC) and 
        Realm Administration server.
        </para>

        <para>
        The <application>dpkg-reconfigure</application> adds entries to the <filename>/etc/krb5.conf</filename> file for your Realm.
        You should have entries similar to the following:
        </para>

<programlisting>
[libdefaults]
        default_realm = EXAMPLE.COM
...
[realms]
        EXAMPLE.COM = }                
                kdc = 192.168.0.1               
                admin_server = 192.168.0.1
        }
</programlisting>

        <para>
        You can test the configuration by requesting a ticket using the <application>kinit</application> utility.  For example:
        </para>

<screen>
<command>kinit steve@EXAMPLE.COM</command>
<computeroutput>Password for steve@EXAMPLE.COM:</computeroutput>
</screen>

        <para>
        When a ticket has been granted, the details can be viewed using <application>klist</application>:
        </para>

<screen>
<command>klist</command>
<computeroutput>Ticket cache: FILE:/tmp/krb5cc_1000
Default principal: steve@EXAMPLE.COM

Valid starting     Expires            Service principal
07/24/08 05:18:56  07/24/08 15:18:56  krbtgt/EXAMPLE.COM@EXAMPLE.COM
        renew until 07/25/08 05:18:57


Kerberos 4 ticket cache: /tmp/tkt1000
klist: You have no tickets cached</computeroutput>
</screen>

        <para>
        Next, use the <application>auth-client-config</application> to configure the <application>libpam-krb5</application> module
        to request a ticket during login:
        </para>

<screen>
<command>sudo auth-client-config -a -p kerberos_example</command>
</screen>

        <para>
        You will should now receive a ticket upon successful login authentication. 
        </para>

      </sect3>
    </sect2>
    <sect2 id="kerberos-resources" status="review">
      <title>Resources</title>

      <itemizedlist>
        <listitem>
          <para>
          For more information on Kerberos see the <ulink url="http://web.mit.edu/Kerberos/">MIT Kerberos</ulink> site.
          </para>
        </listitem>
        <listitem>
          <para>
          O'Reilly's <ulink url="http://oreilly.com/catalog/9780596004033/">Kerberos: The Definitive Guide</ulink> is a great reference when
          setting up Kerberos.
          </para>
        </listitem>
        <listitem>
          <para>
          Also, feel free to stop by the <emphasis>#ubuntu-server</emphasis> IRC channel on <ulink url="http://freenode.net/">Freenode</ulink>  
          if you have Kerberos questions.
          </para>
        </listitem>
      </itemizedlist>

    </sect2>
  </sect1>
</chapter>
