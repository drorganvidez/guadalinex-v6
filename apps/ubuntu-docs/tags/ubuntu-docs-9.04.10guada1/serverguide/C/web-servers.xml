<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../libs/global.ent">
%globalent;
<!ENTITY % gnome-menus-C SYSTEM "../../libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
<chapter id="web-servers" status="review">
	<title>Web Servers</title>
		<para>A Web server is a software responsible for accepting HTTP requests
    from clients, which are known as Web browsers, and serving them HTTP
    responses along with optional data contents, which usually are Web
    pages such as HTML documents and linked objects (images, etc.).</para>
	<sect1 id="httpd" status="review">
		<title>HTTPD - Apache2 Web Server</title>
      <para>Apache is the most commonly used Web Server on Linux systems. Web Servers are used
          to serve Web Pages requested by client computers. Clients typically request and view
          Web Pages using Web Browser applications such as <application>Firefox</application>,
              <application>Opera</application>, or <application>Mozilla</application>.</para>
      <para>Users enter a Uniform Resource Locator (URL) to point to a Web server by means of
          its Fully Qualified Domain Name (FQDN) and a path to the required resource. For example, to view the home page of
          the <ulink url="&ubuntu-web;">Ubuntu Web site</ulink> a user will enter only the FQDN. To request specific information about 
              <ulink url="&ubuntu-paidsupport;">paid
              support</ulink>, a user will enter the FQDN followed by a path.</para>
      <para>The most common protocol used to transfer Web pages is the Hyper Text Transfer
          Protocol (HTTP). Protocols such as Hyper Text Transfer Protocol over Secure Sockets Layer (HTTPS), and
          File Transfer Protocol (FTP), a protocol for uploading and downloading files, are also
          supported.</para>
      <para>Apache Web Servers are often used in combination with the <application>MySQL</application>
          database engine, the HyperText Preprocessor (<application>PHP</application>)
          scripting language, and other popular scripting languages such as
              <application>Python</application> and <application>Perl</application>. This
          configuration is termed LAMP (Linux, Apache, MySQL and Perl/Python/PHP) and forms a
          powerful and robust platform for the development and deployment of Web-based
          applications.</para>
<sect2 id="http-installation" status="review">
  <title>Installation</title>
                  <para>The Apache2 web server is available in Ubuntu
                  Linux. To install Apache2:</para>
          <procedure><step>
                	  <para>At a terminal prompt enter the following command:
<screen>
<command>sudo apt-get install apache2</command>
</screen>
             		  </para>
			</step>
	    </procedure>
      </sect2>
      <sect2 id="http-configuration" status="review">
        <title>Configuration</title>
          <para>
          Apache is configured by placing <emphasis>directives</emphasis> in plain text
          configuration files. The main configuration file is called 
		  <filename>apache2.conf</filename>. In addition, other configuration files may be added
          using the <emphasis>Include</emphasis> directive, and wildcards can be used to
          include many configuration files. Any directive may be placed
          in any of these configuration files. Changes to the main
          configuration files are only recognized by Apache2 when it is
          started or restarted.</para>

          <para>The server also reads a file containing mime document types;
          the filename is set by the <emphasis>TypesConfig</emphasis> directive, and is
          <filename>mime.types</filename> by default.</para>

          <para>The default Apache2 configuration file is <filename>/etc/apache2/apache2.conf</filename> .
          You can edit this file to configure the Apache2 server. You can
          configure the port number, document root, modules, log files, 
          virtual hosts, etc.
          </para>
        <sect3 id="http-basic-settings" status="review">
          <title>Basic Settings</title>
            <para>
             This section explains Apache2 server essential configuration
             parameters. Refer to the <ulink
             url="http://httpd.apache.org/docs/2.2/">Apache2
             Documentation</ulink> for more details.</para>

             <itemizedlist>

             <listitem><para>
             Apache2 ships with a virtual-host-friendly default configuration.
			 That is, it is configured with a single default virtual host (using
			 the <emphasis>VirtualHost</emphasis> directive) which can modified or used as-is if you
			 have a single site, or used as a template for additional virtual hosts
			 if you have multiple sites.  If left alone, the default virtual host
			 will serve as your default site, or the site users will see if the
			 URL they enter does not match the <emphasis>ServerName</emphasis> directive of any of your 
			 custom sites.  To modify the default virtual host, edit the file
			 <filename>/etc/apache2/sites-available/default</filename>.  If you
			 wish to configure a new virtual host or site, copy that file into the
			 same directory with a name you choose.  For example,
			 <command>sudo cp /etc/apache2/sites-available/default /etc/apache2/sites-available/mynewsite</command>
			 Edit the new file to configure the new site using some of the directives
			 described below.
            </para></listitem>

             <listitem><para>
			 The <emphasis>ServerAdmin</emphasis> directive specifies the email address to be advertised
			 for the server's administrator.  The default value is webmaster@localhost.
			 This should be changed to an email address that is delivered to you (if you
			 are the server's administrator).  If your website has a problem, Apache2
			 will display an error message containing this email address to report the
			 problem to.  Find this directive in your site's configuration file in
			 /etc/apache2/sites-available.
			 </para></listitem>

             <listitem><para>
             The <emphasis>Listen</emphasis> directive specifies the port, and optionally the IP address,
			 Apache2 should listen on. If the IP address is not specified, Apache2
			 will listen on all IP addresses assigned to the machine it runs on.
			 The default value for the Listen directive is 80.  Change this to
			 127.0.0.1:80 to cause Apache2 to listen only on your loopback interface
			 so that it will not be available to the Internet, to (for example) 81
			 to change the port that it listens on, or leave it as is for normal
			 operation.  This directive can be found and changed in its own file,
			 <filename>/etc/apache2/ports.conf</filename>
             </para></listitem>

			 <listitem><para>
			 The <emphasis>ServerName</emphasis> directive is optional and specifies what FQDN your
			 site should answer to.  The default virtual host has no ServerName
			 directive specified, so it will respond to all requests that do not
			 match a ServerName directive in another virtual host.  If you have
			 just acquired the domain name ubunturocks.com and wish to host it on
			 your Ubuntu server, the value of the ServerName directive in your
			 virtual host configuration file should be ubunturocks.com.  Add this
			 directive to the new virtual host file you created earlier 
			 (<filename>/etc/apache2/sites-available/mynewsite</filename>).
			 
			 <tip><para>You may also want your site to respond to www.ubunturocks.com, since
				many users will assume the www prefix is appropriate.  Use the
				<emphasis>ServerAlias</emphasis> directive for this.  You may also use wildcards in the
				ServerAlias directive.  For example,
				<command>ServerAlias *.ubunturocks.com</command>
				will cause your site to respond to any domain request ending in
				.ubunturocks.com.
			 </para></tip>
			 </para></listitem>

			 <listitem><para>
			 The <emphasis>DocumentRoot</emphasis> directive specifies where Apache should look for the
			 files that make up the site.  The default value is /var/www.  No site
			 is configured there, but if you uncomment the <emphasis>RedirectMatch</emphasis> directive
			 in <filename>/etc/apache2/apache2.conf</filename> requests will be
			 redirected to /var/www/apache2-default where the default Apache2 site
			 awaits.  Change this value in your site's virtual host file, and
			 remember to create that directory if necessary!
			 </para></listitem>
            </itemizedlist>

			<tip><para>
			The /etc/apache2/sites-available directory is <emphasis role="bold">
			not</emphasis> parsed by Apache2.  Symbolic links in /etc/apache2/sites-enabled
			point to &quot;available&quot; sites.  Use the a2ensite (Apache2
			Enable Site) utility to create those symbolic links, like so:
			<command>sudo a2ensite mynewsite</command>
			where your site&apos;s configuration file is <filename>
			/etc/apache2/sites-available/mynewsite</filename>.  Similarly, the
			a2dissite utility should be used to disable sites.
			</para></tip>

        </sect3>
        <sect3 id="default-settings" status="review">
          <title>Default Settings</title>
            <para>
             This section explains configuration of the Apache2 server
             default settings.  For example, if you add a virtual host, 
             the settings you configure for the virtual host take
             precedence for that virtual host. For a directive not
             defined within the virtual host settings, the default
             value is used.
            </para>

            <itemizedlist>
            <listitem>
            <para>
             The <emphasis>DirectoryIndex</emphasis> is the default page served by the
             server when a user requests an index of a directory by
             specifying a forward slash (/) at the end of the directory
             name.</para>

             <para>For example, when a user requests the page
             http://www.example.com/this_directory/, he or she will
             get either the DirectoryIndex page if it exists, a
             server-generated directory list if it does not and the
			 Indexes option is specified, or a Permission Denied page
			 if neither is true.  The server will try to
             find one of the files listed in the DirectoryIndex
             directive and will return the first one it finds. If it
             does not find any of these files and if Options Indexes is
             set for that directory, the server will generate and
             return a list, in HTML format, of the subdirectories and
             files in the directory.  The default value, found in
			 <filename>/etc/apache2/apache2.conf</filename> is &quot;
			 index.html index.cgi index.pl index.php index.xhtml&quot;.
			 Thus, if Apache2 finds a file in a requested directory
			 matching any of these names, the first will be displayed.
            </para>
            </listitem>

            <listitem>
            <para>
             The <emphasis>ErrorDocument</emphasis> directive allows you to specify a file
			 for Apache to use for specific error events.  For example,
			 if a user requests a resource that does not exist, a 404
			 error will occur, and per Apache2's default configuration,
			 the file <filename>/usr/share/apache2/error/HTTP_NOT_FOUND.html.var
			 </filename> will be displayed.  That file is not in the
			 server's DocumentRoot, but there is an Alias directive in
			 <filename>/etc/apache2/apache2.conf</filename> that redirects
			 requests to the /error directory to /usr/share/apache2/error/.
			 To see a list of the default ErrorDocument directives, use this
			 command:
			 <command>grep ErrorDocument /etc/apache2/apache2.conf</command>
            </para>
            </listitem>


            <listitem>
            <para>
             By default, the server writes the transfer log to the file
             /var/log/apache2/access.log. You can change this on a per-site
			 basis in your virtual host configuration files with the <emphasis>CustomLog</emphasis>
			 directive, or omit it to accept the default, specified in <filename>
			 /etc/apache2/apache2.conf</filename>.  You may also specify the file
			 to which errors are logged, via the <emphasis>ErrorLog</emphasis> directive, whose default
			 is <filename>/var/log/apache2/error.log</filename>.  These are kept
			 separate from the transfer logs to aid in troubleshooting problems
			 with your Apache2 server.  You may also specify the <emphasis>LogLevel</emphasis> (the
			 default value is &quot;warn&quot;) and the <emphasis>LogFormat</emphasis> (see <filename>
			 /etc/apache2/apache2.conf</filename> for the default value).
			 </para>
            </listitem>

            <listitem>
            <para>
            Some options are specified on a per-directory basis rather than per-server.
			Option is one of these directives.  A Directory stanza is enclosed in 
			XML-like tags, like so:
	    </para>
<screen>
<command>&lt;Directory /var/www/mynewsite&gt;
...
&lt;/Directory&gt;</command>
</screen>
	    <para>
	    The Options directive within a Directory stanza accepts one or more of the
	    following values (among others), separated by spaces:
            </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para><emphasis role="bold">ExecCGI</emphasis> - Allow
                    execution of CGI scripts. CGI scripts are not
                    executed if this option is not chosen.
					<tip><para>Most files should not be executed as CGI scripts.  This
					would be very dangerous.  CGI scripts should kept in a directory 
					separate from and outside your DocumentRoot, and only this
					directory should have the ExecCGI option set.  This is the default,
					and the default location for CGI scripts is /usr/lib/cgi-bin.
					</para></tip>
					</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Includes</emphasis> - Allow server-side includes.
					Server-side includes allow an HTML file to <emphasis>
					include</emphasis> other files.  This is not a common option.  See
					<ulink url="http://httpd.apache.org/docs/2.2/howto/ssi.html">the Apache2
					SSI HOWTO</ulink> for more information.</para>
                </listitem>
                <listitem>
                    <para><emphasis
                    role="bold">IncludesNOEXEC</emphasis> - Allow server-side includes,
                    but disable the #exec and #include commands in CGI
                    scripts.</para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis role="bold">Indexes</emphasis> - Display a formatted list of the
                    directory's contents, if no
                    <emphasis>DirectoryIndex</emphasis> (such as index.html) exists in the 
					requested directory.
					<caution><para>For security reasons, this should usually not be set, and certainly
					should not be set on your DocumentRoot directory.  Enable this option carefully on
					a per-directory basis only if you are certain you want users to see the entire
					contents of the directory.</para></caution>
                    </para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis role="bold">Multiview</emphasis> - Support content-negotiated multiviews;
                    this option is disabled by default for security reasons.  See the <ulink
					url="http://httpd.apache.org/docs/2.2/mod/mod_negotiation.html#multiviews">Apache2
					documentation on this option</ulink>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis
                    role="bold">SymLinksIfOwnerMatch</emphasis> - Only follow symbolic links
                    if the target file or directory has the same owner as the link.
                    </para>
                </listitem>
            </itemizedlist>

            </listitem>
            </itemizedlist>
        </sect3>
        <sect3 id="virtual-hosts-settings" status="review">

          <title>Virtual Hosts Settings</title>
            <para>
			Virtual hosts allow you to run different servers for different IP addresses, different host 
			names, or different ports on the same machine. For example, you can run the website for 
			http://www.example.com and http://www.anotherexample.com on the same Web server using virtual 
			hosts. This option corresponds to the &lt;VirtualHost&gt; directive for the default virtual 
			host and IP-based virtual hosts. It corresponds to the &lt;NameVirtualHost&gt; directive for 
			a name-based virtual host.
			</para>

			<para>
			The directives set for a virtual host only apply to that particular virtual host. If a 
			directive is set server-wide and not defined within the virtual host settings, the default 
			setting is used. For example, you can define a Webmaster email address and not define 
			individual email addresses for each virtual host. 
    		</para>
 
 			<para>
			Set the DocumentRoot directive to the directory that contains the root document (such as 
			index.html) for the virtual host. The default DocumentRoot is <filename>/var/www</filename>.
			</para>

			<para>
			The ServerAdmin directive within the VirtualHost stanza is the email address used in the 
			footer of error pages if you choose to show a footer with an email address on the error pages.
			</para>

        </sect3>
        <sect3 id="server-settings" status="review">
          <title>Server Settings</title>
            <para>
This section explains how to configure basic server settings.</para>
                    <para><emphasis role="bold">LockFile</emphasis> - The LockFile directive sets the path 
					to the lockfile used when the server is compiled with either USE_FCNTL_SERIALIZED_ACCEPT 
					or USE_FLOCK_SERIALIZED_ACCEPT. It must be stored on the local disk. It should be left 
					to the default value unless the logs directory is located on an NFS share. If this is 
					the case, the default value should be changed to a location on the local disk and to a 
					directory that is readable only by root. </para>

					<para><emphasis role="bold">PidFile</emphasis> - The PidFile directive sets the file in which the server 
					records its process ID (pid). This file should only be readable by root. In most cases, it should be left 
					to the default value.</para>

<para><emphasis role="bold">User</emphasis> - The User directive sets the userid used by the server to answer requests. This 
setting determines the server's access. Any files inaccessible to this user will also be inaccessible to your website's visitors. 
The default value for User is www-data.  </para>
            <warning>
            <para>
 Unless you know exactly what you are doing, do not set the User directive to root. Using root as the User will create large security holes for your Web server.  </para>
            </warning>
 <para>The Group directive is similar to the User directive. Group sets the group under which the server will answer requests. The default group is also www-data.</para>

        </sect3>
        <sect3 id="apache-modules" status="review">
          <title>Apache Modules</title>
              <para>

              Apache is a modular server. This implies that only the most
              basic functionality is included in the core server. Extended
              features are available through modules which can be loaded
              into Apache. By default, a base set of modules is included in
              the server at compile-time. If the server is compiled to use
              dynamically loaded  modules, then modules can be compiled
              separately, and added at any time using the LoadModule
              directive. Otherwise, Apache must be recompiled to add or
              remove modules. Ubuntu compiles Apache2 to allow the dynamic
			  loading of modules.  Configuration directives may be conditionally
	      included on the presence of a particular module by enclosing
              them in an &lt;IfModule&gt; block.

              You can install additional Apache2 modules and use them
              with your Web server. You can install Apache2
              modules using the <application>apt-get</application>
              command. For example, to install the Apache2 module
              for MySQL authentication, you can run the
                following command from a terminal prompt:</para>
                
                <para>
<screen>
<command>sudo apt-get install libapache2-mod-auth-mysql</command>
</screen>
                </para>
                <para>
                Once you install the module, the module will
                be available in the
                <filename>/etc/apache2/mods-available</filename> directory. You can use
              the <application>a2enmod</application> command to
              enable a module. You can use
              the <application>a2dismod</application> command to
              disable a module. Once you enable the module,
              the module will be available in the
              the <filename>/etc/apache2/mods-enabled</filename> directory.
              </para>
        </sect3>
      </sect2>
      <sect2 id="https-configuration" status="review">
        <title>HTTPS Configuration</title>
          <para>
           The <application>mod_ssl</application> module adds
           an important feature to the Apache2 server - the ability to
           encrypt communications.  Thus, when your browser is
           communicating using SSL, the
           https:// prefix is used at the beginning of the Uniform
           Resource Locator (URL) in the browser navigation bar.
          </para>

          <para>
          The <application>mod_ssl</application> module is available in
          <application>apache2-common</application> package. If you have
          installed this package, you can run the following command from a terminal prompt to
          enable the <application>mod_ssl</application> module:
          </para>

          <para>
<screen>
<command>sudo a2enmod ssl</command>
</screen>
          </para>

	  <para>
          In order for <application>Apache</application> to provide HTTPS, 
          a <emphasis>certificate</emphasis> and <emphasis>key</emphasis> file are also needed.
          For information on generating a key and obtaining a certificate see <xref linkend="certificates-and-security"/>
          </para>
            <para>
            To configure <application>Apache</application> for HTTPS add the following four lines to the
            <filename>/etc/apache2/sites-available/default</filename>
            file, or the configuration file for your secure virtual
	    host. They should be placed in the <emphasis>VirtualHost</emphasis> section
            under the <emphasis>DocumentRoot</emphasis> line:
            </para>
<programlisting>
SSLEngine on

SSLOptions +StrictRequire

SSLCertificateFile /etc/ssl/certs/server.crt
SSLCertificateKeyFile /etc/ssl/private/server.key
</programlisting>
            <note>
              <para>
              The directories <filename>/etc/ssl/certs</filename> and <filename>/etc/ssl/private</filename> are the
              default locations.  If you install the certificate and key in another directory make sure to change
              <emphasis>SSLCertificateFile</emphasis> and <emphasis>SSLCertificateKeyFile</emphasis> appropriately.
              </para>
            </note>
            <para>
            Once you install your certificate, and configure Apache, you should restart your
            web server. You can run the following command at a terminal prompt to
            restart your web server:
            </para>
            <para>
<screen><command>sudo /etc/init.d/apache2 restart</command> </screen>
            </para>

            <note>
              <para>
              Depending on how you obtained your certificate you may need to 
              enter a passphrase when <application>Apache</application> starts. 
              </para>
            </note>
            <para>
 	    You can access the secure server pages by typing
            https://your_hostname/url/ in your browser address bar.
            </para>

      </sect2>
      <sect2 id="http-references" status="review">
        <title>References</title>
          <para>
          <ulink url="http://httpd.apache.org/docs/2.2/">Apache2
          Documentation</ulink>
          </para>
          <para>
          <ulink url="http://www.modssl.org/docs/">Mod SSL
          Documentation</ulink>
          </para>
      </sect2>
    </sect1>

	<sect1 id="php5" status="review">
		<title>PHP5 - Scripting Language</title>
      <para>PHP is a general-purpose scripting language suited for Web
      development. The PHP script can be embedded into HTML. This
      section explains how to install and configure PHP5 in Ubuntu
      System with Apache2 and MySQL.</para>
      <para> This section assumes you have installed and configured
      Apache 2 Web Server and MySQL Database Server. You can refer to
      Apache 2 section and MySQL sections in this document to install and
      configure Apache 2 and MySQL respectively.</para>

<sect2 id="php5-installation" status="review">
  <title>Installation</title>
      <para>The PHP5 is available in Ubuntu Linux. </para>
      
      <procedure><step><para>
      To install PHP5 you
      can enter the following command in the terminal prompt:

<screen>
<command>sudo apt-get install php5 libapache2-mod-php5</command>
</screen>
</para>

      <para>You can run PHP5 scripts from command line. To run PHP5 scripts 
      from command line you should install
      <application>php5-cli</application> package. To install
      <application>php5-cli</application> you can enter the following
      command in the terminal prompt:
<screen>
<command>sudo apt-get install php5-cli</command>
</screen>
</para>
      <para>
      You can also execute PHP5 scripts without installing PHP5 Apache
      module. To accomplish this, you should install
      <application>php5-cgi</application> package. You can run the
      following command in a terminal prompt to install
      <application>php5-cgi</application> package:
<screen>
<command>sudo apt-get install php5-cgi</command>
</screen>
      </para>
      <para>To use <application>MySQL</application> with PHP5 you should install
      <application>php5-mysql</application> package. To install
      <application>php5-mysql</application> you can enter the following
      command in the terminal prompt:
<screen>
<command>sudo apt-get install php5-mysql</command>
</screen>
</para>
      <para>Similarly, to use <application>PostgreSQL</application> with PHP5 you should install
      <application>php5-pgsql</application> package. To install
      <application>php5-pgsql</application> you can enter the following
      command in the terminal prompt:
<screen>
<command>sudo apt-get install php5-pgsql</command>
</screen>
      </para>
			</step>
	    </procedure>
      </sect2>
      <sect2 id="php5-configuration" status="review">
        <title>Configuration</title>
          <para>
          Once you install PHP5, you can run PHP5 scripts from your web
          browser. If you have installed
          <application>php5-cli</application> package, you can run PHP5
          scripts from your command prompt.
          </para>

          <para>
          By default, the Apache 2 Web server is configured to run PHP5
          scripts. In other words, the PHP5 module is enabled in Apache2
          Web server automatically when you install the module. Please
          verify if the files
          <filename>/etc/apache2/mods-enabled/php5.conf</filename> and
          <filename>/etc/apache2/mods-enabled/php5.load</filename>
          exist. If they do not exists, you can enable the module using
          <command>a2enmod</command> command.
          </para>

          <para>Once you install PHP5 related packages and enabled PHP5
          Apache 2 module, you should restart Apache2 Web server to run
          PHP5 scripts. You can run the following command at a terminal
          prompt to restart your web server:
<screen><command>sudo /etc/init.d/apache2 restart</command> </screen>
          </para>
      </sect2>
      <sect2 id="php5-testing" status="review">
        <title>Testing</title>
          <para>To verify your installation, you can run following PHP5
          phpinfo script:
          </para>
<programlisting>
&lt;?php
print_r (phpinfo());
?&gt;
</programlisting>
          <para>
          You can save the content in a file
          <filename>phpinfo.php</filename> and place it
          under <command>DocumentRoot</command> directory of Apache2 Web
          server. When point your browser to
          <filename>http://hostname/phpinfo.php</filename>, it would
          display values of various PHP5 configuration parameters.
      </para>
      </sect2>
    </sect1>
	
	<sect1 id="squid" status="review">
		<title>Squid - Proxy Server</title>
          <para>
          Squid is a full-featured web proxy cache server application which provides proxy and cache services for Hyper Text
          Transport Protocol (HTTP), File Transfer Protocol (FTP), and other popular network protocols.  Squid can implement
          caching and proxying of Secure Sockets Layer (SSL) requests and caching of Domain Name Server (DNS) lookups, and perform
          transparent caching. Squid also supports a wide variety of caching protocols, such as Internet Cache Protocol, (ICP)
          the Hyper Text Caching Protocol, (HTCP) the Cache Array Routing Protocol (CARP), and the Web Cache Coordination 
          Protocol. (WCCP) 
          </para>
          <para>
          The Squid proxy cache server is an excellent solution to a variety of proxy and caching server needs, and scales from
          the branch office to enterprise level networks while providing extensive, granular access control mechanisms and
          monitoring of critical parameters via the Simple Network Management Protocol (SNMP).  When selecting a computer system
          for use as a dedicated Squid proxy, or caching servers, ensure your system is configured with a large amount of physical
          memory, as Squid maintains an in-memory cache for increased performance.
          </para>
      <sect2 id="squid-installation" status="review">
        <title>Installation</title>
          <para>
            At a terminal prompt, enter the following command to install the Squid server:
          </para>
          <para>
<screen>
<command>sudo apt-get install squid</command>
</screen>
          </para>
      </sect2>
      <sect2 id="squid-configuration" status="review">
        <title>Configuration</title>
          <para>
            Squid is configured by editing the directives contained within the <filename>/etc/squid/squid.conf</filename> configuration file.
            The following examples illustrate some of the directives which may be modified to affect the behavior of the Squid server.
            For more in-depth configuration of Squid, see the References section. 
          </para>
             <tip>
               <para>Prior to editing the configuration file, you should make a copy of the original file and protect it 
               from writing so you will have the original settings as a reference, and to re-use as necessary.
               </para>
               <para>Copy the <filename>/etc/squid/squid.conf</filename> file and protect it from writing with the following commands entered at a terminal prompt:
               </para>
	     </tip>
               <para>
<screen>
<command>sudo cp /etc/squid/squid.conf /etc/squid/squid.conf.original</command>
<command>sudo chmod a-w /etc/squid/squid.conf.original</command>
</screen>
               </para> 
	        <para>
           <itemizedlist>
               <listitem>
                  <para>
                  To set your Squid server to listen on TCP port 8888 instead of the default TCP port 3128, change
                  the http_port directive as such:
                  </para>
<programlisting>
http_port 8888
</programlisting>
               </listitem>
	            <listitem>
                  <para>
                  Change the visible_hostname directive in order to give the Squid server a specific hostname.  This hostname
                  does not necessarily need to be the computer's hostname. In this example it is set to <emphasis>weezie</emphasis>
                  </para>
<programlisting>
visible_hostname weezie
</programlisting>
               </listitem>
               <listitem>
                  <para>
                     Again, Using Squid's access control, you may configure use of Internet services proxied by Squid
                     to be available only users with certain Internet Protocol (IP) addresses.  For example, we will illustrate access 
                     by users of the 192.168.42.0/24 subnetwork only:
                  </para>
                  <para>
                     Add the following to the <emphasis role="bold">bottom</emphasis> of the ACL section of your <filename>/etc/squid/squid.conf</filename> file:
                  </para>
<programlisting>
acl fortytwo_network src 192.168.42.0/24
</programlisting>
                  <para>
                     Then, add the following to the <emphasis role="bold">top</emphasis> of the http_access section of your
                     <filename>/etc/squid/squid.conf</filename> file:
                  </para>
<programlisting>
http_access allow fortytwo_network
</programlisting>
               </listitem>
               <listitem>
                  <para>
                     Using the excellent access control features of Squid, you may configure use of Internet services proxied by Squid
                     to be available only during normal business hours.  For example, we'll illustrate access by employees of a business
                     which is operating between 9:00AM and 5:00PM, Monday through Friday, and which uses the 10.1.42.0/42 subnetwork:
                  </para>
                  <para>
                     Add the following to the <emphasis role="bold">bottom</emphasis> of the ACL section of your <filename>/etc/squid/squid.conf</filename> file:
                  </para>
<programlisting>
acl biz_network src 10.1.42.0/24
acl biz_hours time M T W T F 9:00-17:00
</programlisting>
                  <para>
                     Then, add the following to the <emphasis role="bold">top</emphasis> of the http_access section of your
                     <filename>/etc/squid/squid.conf</filename> file:
                  </para>
<programlisting>
http_access allow biz_network biz_hours
</programlisting>
               </listitem>
          </itemizedlist>
          </para>
          <note>
	  <para>
          After making changes to the <filename>/etc/squid/squid.conf</filename> file, save the file and restart the <application>squid</application> 
          server application to effect the changes using the following command entered at a terminal prompt:
          </para>
          </note>
          <para>
<screen>
<command>sudo /etc/init.d/squid restart</command>
</screen>
          </para>
      </sect2>
      <sect2 id="squid-references" status="review">
      <title>References</title>
      <para>
      <ulink url="http://www.squid-cache.org/">Squid Website</ulink>
      </para>
      </sect2>
    </sect1>

	<sect1 id="ruby-on-rails" status="review">
		<title>Ruby on Rails</title>
    <para>Ruby on Rails is an open source web framework for developing
    database backed web applications. It is optimized for sustainable
    productivity of the programmer since it lets the programmer to write
    code by favouring convention over configuration.</para>

    <sect2 id="ruby-on-rails-installation" status="review">
      <title>Installation</title>
    	<para>
	    Before installing <application>Rails</application> you should install <application>Apache</application>
	    and <application>MySQL</application>.
	    To install the <application>Apache</application> package, please refer to
	    <xref linkend="httpd"/>.  For instructions on installing 
	    <application>MySQL</application> refer to
	    <xref linkend="mysql"/>.
	</para>
      <para>
      	Once you have <application>Apache</application> and
        <application>MySQL</application> packages installed,
      	you are ready to install <application>Ruby on
        Rails</application> package.
      </para>     
	
      <para> 
      To install the <application>Ruby</application> base packages and
      <application>Ruby on Rails</application>,
      you can enter the following command in the terminal prompt:
      </para>
<screen>
<command>sudo apt-get install rails</command>
</screen>
    
    </sect2>
    <sect2 id="ruby-on-rails-configuration" status="review">
    <title>Configuration</title>    
    <para>
    	Modify the <filename>/etc/apache2/sites-available/default</filename>
	configuration file to setup your domains.
    </para>
    <para>
    	The first thing to change is the <emphasis>DocumentRoot</emphasis>
      directive:
    </para>
<programlisting>
DocumentRoot /path/to/rails/application/public
</programlisting>
    <para>
    	Next, change the &lt;Directory
      "/path/to/rails/application/public"&gt; directive:
    </para>
<programlisting>
&lt;Directory "/path/to/rails/application/public"&gt;
        Options Indexes FollowSymLinks MultiViews ExecCGI
        AllowOverride All
        Order allow,deny
        allow from all
        AddHandler cgi-script .cgi
&lt;/Directory&gt;
</programlisting>
    
    <para>
    You should also enable the <application>mod_rewrite</application>
    module for Apache.  To enable <application>mod_rewrite</application>
    module, please enter the following command in a terminal prompt: 
    </para>
<screen>
<command>sudo a2enmod rewrite</command>
</screen>
   
    <para>
    Finally you will need to change the ownership of the <filename>/path/to/rails/application/public</filename>
    and <filename>/path/to/rails/application/tmp</filename> directories to the user used to run the 
    <application>Apache</application> process:
    </para>
<screen>
<command>sudo chown -R www-data:www-data /path/to/rails/application/public</command>
<command>sudo chown -R www-data:www-data /path/to/rails/application/tmp</command>
</screen>

    <para>That's it! Now you have your Server ready for your
    <application>Ruby on Rails</application> applications.
    </para>
    </sect2>
  </sect1>
</chapter>
